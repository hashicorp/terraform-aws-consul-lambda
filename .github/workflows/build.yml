name: build
on: [workflow_dispatch, push]
env:
  PKG_NAME: "consul-lambda-registrator"

jobs:
  get-go-version:
    name: "Determine Go toolchain version"
    defaults:
      run:
        working-directory: ./consul-lambda-registrator
    runs-on: ubuntu-latest
    outputs:
      go-version: ${{ steps.get-go-version.outputs.go-version }}
    steps:
      - uses: actions/checkout@v2
      - name: Determine Go version
        id: get-go-version
        run: |
          echo "Building with Go $(cat .go-version)"
          echo "::set-output name=go-version::$(cat ./consul-lambda-registrator/.go-version)"

  get-product-version:
    defaults:
      run:
        working-directory: ./consul-lambda-registrator
    runs-on: ubuntu-latest
    outputs:
      product-version: ${{ steps.get-product-version.outputs.product-version }}
      ldflags: ${{ steps.get-product-version.outputs.ldflags }}
      git-short-sha: ${{ steps.get-product-version.outputs.git-short-sha }}
    steps:
      - uses: actions/checkout@v2
      - name: get product version
        id: get-product-version
        run: |
          echo "::set-output name=product-version::$(make version)"
          echo "::set-output name=ldflags::-s -w -X github.com/hashicorp/terraform-aws-consul-lambda-registrator/version.GitCommit=$(git rev-parse --short HEAD)"
          echo "::set-output name=git-short-sha::$(git rev-parse --short HEAD)"

  generate-metadata-file:
    needs: get-product-version
    defaults:
      run:
        working-directory: ./consul-lambda-registrator
    runs-on: ubuntu-latest
    outputs:
      filepath: ${{ steps.generate-metadata-file.outputs.filepath }}
    steps:
      - name: "Checkout directory"
        uses: actions/checkout@v2
      - name: Generate metadata file
        id: generate-metadata-file
        uses: hashicorp/actions-generate-metadata@v1
        with:
          version: ${{ needs.get-product-version.outputs.product-version }}
          product: ${{ env.PKG_NAME }}
          repositoryOwner: "hashicorp"
      - uses: actions/upload-artifact@v2
        with:
          name: metadata.json
          path: ${{ steps.generate-metadata-file.outputs.filepath }}

  build-linux:
    defaults:
      run:
        working-directory: ./consul-lambda-registrator
    env:
      GOOS: linux
      GOARCH: amd64
      LDFLAGS: ${{ needs.get-product-version.outputs.ldflags }}
    needs:
      - get-go-version
      - get-product-version
    runs-on: ubuntu-latest
    name: Go build
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ needs.get-go-version.outputs.go-version }}

      - name: Build
        run: |
          mkdir dist out
          go build -ldflags="$LDFLAGS" -o dist/ .
          zip -r -j out/${{ env.PKG_NAME }}_${{ needs.get-product-version.outputs.product-version }}_${{ env.GOOS }}_${{ env.GOARCH }}.zip dist/

      - uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PKG_NAME }}_${{ needs.get-product-version.outputs.product-version }}_${{ env.GOOS }}_${{ env.GOARCH }}.zip
          path: consul-lambda-registrator/out/${{ env.PKG_NAME }}_${{ needs.get-product-version.outputs.product-version }}_${{ env.GOOS }}_${{ env.GOARCH }}.zip

  build-docker-default:
    defaults:
      run:
        working-directory: ./consul-lambda-registrator
    name: Docker default release build
    needs:
      - get-product-version
      - build-linux
    runs-on: ubuntu-latest
    env:
      version: ${{ needs.get-product-version.outputs.product-version }}
      arch: amd64

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Docker Build
        uses: hashicorp/actions-docker-build@v1
        with:
          pkg_name: ${{ env.PKG_NAME }}_${{ env.version }}
          bin_name: ${{ env.PKG_NAME }}
          version: ${{ env.version }}
          target: release-default
          workdir: ./consul-lambda-registrator
          arch: ${{ env.arch }}
          tags: |
            docker.io/hashicorp/${{ env.PKG_NAME }}:${{ env.version }}
            public.ecr.aws/hashicorp/${{ env.PKG_NAME }}:${{ env.version }}
          dev_tags: |
            hashicorppreview/${{ env.PKG_NAME }}:${{ env.version }}
            docker.io/hashicorppreview/${{ env.PKG_NAME }}:${{ env.version }}
